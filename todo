#!/usr/bin/env bash

##
# todo
# Minimal todo list manager based on pushd/popd semantics
# Copyright 2023 Doug Hunley <doug.hunley@gmail.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA

# handle debugging
if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
fi

# vars
CONFIG_DIR="${XDG_CONFIG_HOME:=${HOME}/.config}/todo"
CONFIG_FILE="todorc"
NC='\033[0m'
BLUE='\033[0;34m'
DEFAULT_ACTION=help
PRESERVE_QUEUE=false
QUEUE_MODE=lifo
PROJECTS_ONLY=false

# functions
function show_help {
    echo -e "${BLUE}Usage: todo [help, pop]${NC}"
    echo -e "${BLUE}   or: todo push TASK${NC}"
    echo
    echo -e "${BLUE}  help      Show this help${NC}"
    echo -e "${BLUE}  list      List all saved todos${NC}"
    echo -e "${BLUE}  pop       Retrieve the 'topmost' todo in the stack${NC}"
    echo -e "${BLUE}  push msg  Push a todo onto the stack with the given msg${NC}"
}

function config_if_needed {
    if [[ ! -d ${CONFIG_DIR} ]]; then
        mkdir -p "${CONFIG_DIR}"
    fi

    if [[ ! -s ${CONFIG_DIR}/${CONFIG_FILE} ]]; then
        { echo "DEFAULT_ACTION=${DEFAULT_ACTION}" ;
          echo "PRESERVE_QUEUE=${PRESERVE_QUEUE}" ;
          echo "PROJECTS_ONLY=${PROJECTS_ONLY}" ;
          echo "QUEUE_MODE=${QUEUE_MODE}" ;
        } > "${CONFIG_DIR}/${CONFIG_FILE}"
    fi

    source "${CONFIG_DIR}/${CONFIG_FILE}"
}

function push_to_stack {
    _toplevel=$(git rev-parse --show-toplevel 2>/dev/null || echo "${PWD}")
    echo -e "${BLUE}todo: Creating new todo: ${NC}$@" && \
    echo "~$(date +%s)~${_toplevel}~$@~" >> ${CONFIG_DIR}/todo.lst && \
    echo -e "${BLUE}todo: You have ${NC}$(wc -l ${CONFIG_DIR}/todo.lst | cut -d' ' -f1) ${BLUE}todos"
}

function find_when {
    if date --version 2> /dev/null | grep -q GNU; then
        WHEN="$(date --date "@$1")"
    else
        WHEN="$(date -j -f %s "$1")"
    fi
}

function show_todos {
    echo -e "${BLUE}todo: Listing existing todos:${NC}"
    while read -r LINE; do
        _WHEN=$(echo "${LINE}" | cut -d~ -f2)
        WHERE=$(echo "${LINE}" | cut -d~ -f3)
        WHAT=$(echo "${LINE}" | cut -d~ -f4)

        find_when "${_WHEN}"
        # shellcheck disable=all
        echo -e "${WHAT}\t${WHERE}\t${WHEN}"
    done < "${CONFIG_DIR}/todo.lst"
}

function pop_from_stack {
    TODOS=$(wc -l "${CONFIG_DIR}/todo.lst" 2>/dev/null | cut -d' ' -f1)
    if [[ ${TODOS} -lt 1 ]]; then
        echo -e "${BLUE}todo: no todos remain! Congrats!!${NC}"
        exit 0
    fi

    if [[ "${QUEUE_MODE}" == "lifo" ]]; then
        _toplevel=$(git rev-parse --show-toplevel 2>/dev/null || echo "${PWD}")
        PROJECT_WHEN=$(grep "~${_toplevel}~" "${CONFIG_DIR}/todo.lst" | tail -n 1 | cut -d~ -f2)
        if [[ "${PROJECTS_ONLY}" == 'false' ]]; then
            NONPROJECT_WHEN=$(tail -n 1 "${CONFIG_DIR}/todo.lst" | cut -d~ -f2)
            WHEN="${PROJECT_WHEN:-${NONPROJECT_WHEN}}"
        else
            WHEN="${PROJECT_WHEN}"
        fi
    else
        _toplevel=$(git rev-parse --show-toplevel 2>/dev/null || echo "${PWD}")
        PROJECT_WHEN=$(grep "~${_toplevel}~" "${CONFIG_DIR}/todo.lst" | head -n 1 | cut -d~ -f2)
        if [[ "${PROJECTS_ONLY}" == 'false' ]]; then
            NONPROJECT_WHEN=$(head -n 1 "${CONFIG_DIR}/todo.lst" | cut -d~ -f2)
            WHEN="${PROJECT_WHEN:-${NONPROJECT_WHEN}}"
        else
            WHEN="${PROJECT_WHEN}"
        fi
    fi

    if [[ -z "${WHEN}" ]]; then
        echo -e "${BLUE}todo: no todos remain in this project! Congrats!!${NC}"
        exit 0
    else
        WHERE=$(grep "^~${WHEN}~.*" "${CONFIG_DIR}/todo.lst" | cut -d~ -f3)
        WHAT=$(grep "^~${WHEN}~.*" "${CONFIG_DIR}/todo.lst" | cut -d~ -f4)

        if [[ "${WHERE}" == "${PWD}" ]]; then
            echo -e "${BLUE}todo: ${WHAT} ${NC}"
        else
            echo -e "${BLUE}todo: ${WHAT} ${NC}"
            echo -e "${BLUE}todo: cd ${NC}${WHERE} ${BLUE}to continue this todo"
        fi

        if [[ "${PRESERVE_QUEUE}" == 'false' ]]; then
            sed -i "/^~${WHEN}~.*/d" "${CONFIG_DIR}/todo.lst"
        fi
    fi
}

# main logic
case $# in
    1)
        case $1 in
            list)
                show_todos
                ;;
            pop)
                config_if_needed
                pop_from_stack
                ;;
            help|*)
                show_help
                exit 1
                ;;
        esac
        ;;
    2)
        case $1 in
            push)
                config_if_needed
                shift
                push_to_stack "$@"
                ;;
            *)
                show_help
                exit 1
                ;;
        esac
        ;;
    0|*)
        show_help
        exit 1
        ;;
esac
